name: Deploy to Firebase

on:
  push:
    branches: [ main ]

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Frontend Dependencies
        working-directory: ./timebridge-ai/frontend
        run: |
          npm install --legacy-peer-deps
          npm install firebase @firebase/auth @firebase/app
          
      - name: Create Firebase Config
        working-directory: ./timebridge-ai/frontend
        run: |
          mkdir -p src/lib/firebase
          cat > src/lib/firebase/config.ts << 'EOL'
          import { initializeApp } from 'firebase/app';
          import { getAuth } from 'firebase/auth';
          import { getFirestore } from 'firebase/firestore';

          const firebaseConfig = {
            apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
            authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
            projectId: 'timebridgeai',
            storageBucket: 'timebridgeai.appspot.com',
            messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
            appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
          };

          const app = initializeApp(firebaseConfig);
          export const auth = getAuth(app);
          export const db = getFirestore(app);
          export default app;
          EOL

          cat > src/lib/firebase/auth.ts << 'EOL'
          export { auth } from './config';
          EOL

          cat > src/lib/firebase/admin.ts << 'EOL'
          export { auth as admin } from './config';
          EOL
          
      - name: Build Frontend
        working-directory: ./timebridge-ai/frontend
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: "timebridgeai"
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: npm run build
        
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: timebridgeai

  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Backend Dependencies
        working-directory: ./timebridge-ai/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          token_format: 'access_token'
          create_credentials_file: true
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Create Artifact Registry Repository
        run: |
          gcloud artifacts repositories create timebridge-backend \
            --repository-format=docker \
            --location=us-central1 \
            --project=timebridgeai
            
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: timebridge-backend
          region: us-central1
          source: ./timebridge-ai/backend
          project_id: timebridgeai 